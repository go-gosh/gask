// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/go-gosh/gask/app/model"
)

func newCheckpoint(db *gorm.DB, opts ...gen.DOOption) checkpoint {
	_checkpoint := checkpoint{}

	_checkpoint.checkpointDo.UseDB(db, opts...)
	_checkpoint.checkpointDo.UseModel(&model.Checkpoint{})

	tableName := _checkpoint.checkpointDo.TableName()
	_checkpoint.ALL = field.NewAsterisk(tableName)
	_checkpoint.ID = field.NewUint(tableName, "id")
	_checkpoint.CreatedAt = field.NewTime(tableName, "created_at")
	_checkpoint.UpdatedAt = field.NewTime(tableName, "updated_at")
	_checkpoint.DeletedAt = field.NewField(tableName, "deleted_at")
	_checkpoint.Point = field.NewInt(tableName, "point")
	_checkpoint.MilestoneId = field.NewUint(tableName, "milestone_id")
	_checkpoint.Content = field.NewString(tableName, "content")
	_checkpoint.JoinedAt = field.NewTime(tableName, "joined_at")
	_checkpoint.CheckedAt = field.NewTime(tableName, "checked_at")
	_checkpoint.Milestone = checkpointBelongsToMilestone{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Milestone", "model.Milestone"),
		Checkpoints: struct {
			field.RelationField
			Milestone struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Milestone.Checkpoints", "model.Checkpoint"),
			Milestone: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Milestone.Checkpoints.Milestone", "model.Milestone"),
			},
		},
	}

	_checkpoint.fillFieldMap()

	return _checkpoint
}

type checkpoint struct {
	checkpointDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Point       field.Int
	MilestoneId field.Uint
	Content     field.String
	JoinedAt    field.Time
	CheckedAt   field.Time
	Milestone   checkpointBelongsToMilestone

	fieldMap map[string]field.Expr
}

func (c checkpoint) Table(newTableName string) *checkpoint {
	c.checkpointDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c checkpoint) As(alias string) *checkpoint {
	c.checkpointDo.DO = *(c.checkpointDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *checkpoint) updateTableName(table string) *checkpoint {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Point = field.NewInt(table, "point")
	c.MilestoneId = field.NewUint(table, "milestone_id")
	c.Content = field.NewString(table, "content")
	c.JoinedAt = field.NewTime(table, "joined_at")
	c.CheckedAt = field.NewTime(table, "checked_at")

	c.fillFieldMap()

	return c
}

func (c *checkpoint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *checkpoint) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["point"] = c.Point
	c.fieldMap["milestone_id"] = c.MilestoneId
	c.fieldMap["content"] = c.Content
	c.fieldMap["joined_at"] = c.JoinedAt
	c.fieldMap["checked_at"] = c.CheckedAt

}

func (c checkpoint) clone(db *gorm.DB) checkpoint {
	c.checkpointDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c checkpoint) replaceDB(db *gorm.DB) checkpoint {
	c.checkpointDo.ReplaceDB(db)
	return c
}

type checkpointBelongsToMilestone struct {
	db *gorm.DB

	field.RelationField

	Checkpoints struct {
		field.RelationField
		Milestone struct {
			field.RelationField
		}
	}
}

func (a checkpointBelongsToMilestone) Where(conds ...field.Expr) *checkpointBelongsToMilestone {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a checkpointBelongsToMilestone) WithContext(ctx context.Context) *checkpointBelongsToMilestone {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a checkpointBelongsToMilestone) Model(m *model.Checkpoint) *checkpointBelongsToMilestoneTx {
	return &checkpointBelongsToMilestoneTx{a.db.Model(m).Association(a.Name())}
}

type checkpointBelongsToMilestoneTx struct{ tx *gorm.Association }

func (a checkpointBelongsToMilestoneTx) Find() (result *model.Milestone, err error) {
	return result, a.tx.Find(&result)
}

func (a checkpointBelongsToMilestoneTx) Append(values ...*model.Milestone) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a checkpointBelongsToMilestoneTx) Replace(values ...*model.Milestone) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a checkpointBelongsToMilestoneTx) Delete(values ...*model.Milestone) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a checkpointBelongsToMilestoneTx) Clear() error {
	return a.tx.Clear()
}

func (a checkpointBelongsToMilestoneTx) Count() int64 {
	return a.tx.Count()
}

type checkpointDo struct{ gen.DO }

type ICheckpointDo interface {
	gen.SubQuery
	Debug() ICheckpointDo
	WithContext(ctx context.Context) ICheckpointDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICheckpointDo
	WriteDB() ICheckpointDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICheckpointDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICheckpointDo
	Not(conds ...gen.Condition) ICheckpointDo
	Or(conds ...gen.Condition) ICheckpointDo
	Select(conds ...field.Expr) ICheckpointDo
	Where(conds ...gen.Condition) ICheckpointDo
	Order(conds ...field.Expr) ICheckpointDo
	Distinct(cols ...field.Expr) ICheckpointDo
	Omit(cols ...field.Expr) ICheckpointDo
	Join(table schema.Tabler, on ...field.Expr) ICheckpointDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICheckpointDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICheckpointDo
	Group(cols ...field.Expr) ICheckpointDo
	Having(conds ...gen.Condition) ICheckpointDo
	Limit(limit int) ICheckpointDo
	Offset(offset int) ICheckpointDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckpointDo
	Unscoped() ICheckpointDo
	Create(values ...*model.Checkpoint) error
	CreateInBatches(values []*model.Checkpoint, batchSize int) error
	Save(values ...*model.Checkpoint) error
	First() (*model.Checkpoint, error)
	Take() (*model.Checkpoint, error)
	Last() (*model.Checkpoint, error)
	Find() ([]*model.Checkpoint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Checkpoint, err error)
	FindInBatches(result *[]*model.Checkpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Checkpoint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICheckpointDo
	Assign(attrs ...field.AssignExpr) ICheckpointDo
	Joins(fields ...field.RelationField) ICheckpointDo
	Preload(fields ...field.RelationField) ICheckpointDo
	FirstOrInit() (*model.Checkpoint, error)
	FirstOrCreate() (*model.Checkpoint, error)
	FindByPage(offset int, limit int) (result []*model.Checkpoint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICheckpointDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c checkpointDo) Debug() ICheckpointDo {
	return c.withDO(c.DO.Debug())
}

func (c checkpointDo) WithContext(ctx context.Context) ICheckpointDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c checkpointDo) ReadDB() ICheckpointDo {
	return c.Clauses(dbresolver.Read)
}

func (c checkpointDo) WriteDB() ICheckpointDo {
	return c.Clauses(dbresolver.Write)
}

func (c checkpointDo) Session(config *gorm.Session) ICheckpointDo {
	return c.withDO(c.DO.Session(config))
}

func (c checkpointDo) Clauses(conds ...clause.Expression) ICheckpointDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c checkpointDo) Returning(value interface{}, columns ...string) ICheckpointDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c checkpointDo) Not(conds ...gen.Condition) ICheckpointDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c checkpointDo) Or(conds ...gen.Condition) ICheckpointDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c checkpointDo) Select(conds ...field.Expr) ICheckpointDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c checkpointDo) Where(conds ...gen.Condition) ICheckpointDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c checkpointDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICheckpointDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c checkpointDo) Order(conds ...field.Expr) ICheckpointDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c checkpointDo) Distinct(cols ...field.Expr) ICheckpointDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c checkpointDo) Omit(cols ...field.Expr) ICheckpointDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c checkpointDo) Join(table schema.Tabler, on ...field.Expr) ICheckpointDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c checkpointDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICheckpointDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c checkpointDo) RightJoin(table schema.Tabler, on ...field.Expr) ICheckpointDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c checkpointDo) Group(cols ...field.Expr) ICheckpointDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c checkpointDo) Having(conds ...gen.Condition) ICheckpointDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c checkpointDo) Limit(limit int) ICheckpointDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c checkpointDo) Offset(offset int) ICheckpointDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c checkpointDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICheckpointDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c checkpointDo) Unscoped() ICheckpointDo {
	return c.withDO(c.DO.Unscoped())
}

func (c checkpointDo) Create(values ...*model.Checkpoint) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c checkpointDo) CreateInBatches(values []*model.Checkpoint, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c checkpointDo) Save(values ...*model.Checkpoint) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c checkpointDo) First() (*model.Checkpoint, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Checkpoint), nil
	}
}

func (c checkpointDo) Take() (*model.Checkpoint, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Checkpoint), nil
	}
}

func (c checkpointDo) Last() (*model.Checkpoint, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Checkpoint), nil
	}
}

func (c checkpointDo) Find() ([]*model.Checkpoint, error) {
	result, err := c.DO.Find()
	return result.([]*model.Checkpoint), err
}

func (c checkpointDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Checkpoint, err error) {
	buf := make([]*model.Checkpoint, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c checkpointDo) FindInBatches(result *[]*model.Checkpoint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c checkpointDo) Attrs(attrs ...field.AssignExpr) ICheckpointDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c checkpointDo) Assign(attrs ...field.AssignExpr) ICheckpointDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c checkpointDo) Joins(fields ...field.RelationField) ICheckpointDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c checkpointDo) Preload(fields ...field.RelationField) ICheckpointDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c checkpointDo) FirstOrInit() (*model.Checkpoint, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Checkpoint), nil
	}
}

func (c checkpointDo) FirstOrCreate() (*model.Checkpoint, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Checkpoint), nil
	}
}

func (c checkpointDo) FindByPage(offset int, limit int) (result []*model.Checkpoint, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c checkpointDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c checkpointDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c checkpointDo) Delete(models ...*model.Checkpoint) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *checkpointDo) withDO(do gen.Dao) *checkpointDo {
	c.DO = *do.(*gen.DO)
	return c
}
